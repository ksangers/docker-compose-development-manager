#!/usr/bin/env bash
# vim: et:sw=2:ts=2:ai

set -euo pipefail

if [[ "$(id -u)" == "0" ]]; then
  echo "This script should not be run as root."
  exit 1
fi
if [ -e /proc/1/cgroup ] && ! head -n1 /proc/1/sched | grep -qce '\(init\|systemd\)'; then
  echo "This script should not be run from a docker container."
  exit 1
fi

_dev() {
  local dc cache_dir cache_lc cache_su cache_kl cache_ae cache_ph cache_pi \
    env self_bin self_path pwd traefik_path traefik_dc machine dc_file
  env=dev
  pwd="$(pwd)"
  PWD="$pwd"
  self_bin="$(realpath "$0")"
  self_path="$(dirname "$self_bin")"
  traefik_path="$self_path/traefik"
  traefik_dc="$traefik_path/docker-compose.yaml"
  help_bin="$self_path/help"
  readonly env self_bin self_path traefik_path traefik_dc help_bin
  export PWD
  _auto_update() {
    _load_cache
    touch -d '-16 hours' "$cache_lc"
    [ "$cache_lc" -nt "$cache_pi" ] && touch "$cache_pi" && "$self_bin" pull
    [ "$cache_lc" -nt "$cache_su" ] && touch "$cache_su" && self_update && check
    return 0
  }
  _cache_add() {
    [ -n "${1:-}" ] && [ -n "${2:-}" ] || exit 1
    local path="$pwd"
    [ -n "${3:-}" ] && path="$3"
    _load_cache
    ! grep -cqxF "$2" "$1" && echo -e "$path" >>"$1"
    return 0
  }
  _cache_exists() {
    [ -n "${1:-}" ] && [ -n "${2:-}" ] || exit 1
    grep -cqxF "$2" "$1" || return 1
  }
  _cache_del() {
    [ -n "${1:-}" ] && [ -n "${2:-}" ] || exit 1
    _load_cache
    local filtered
    echo filtering $2 from $1
    filtered="$(grep -xvF "$2" "$1" || cat "$1")"
    echo $filtered
    echo -e "$filtered" >"$1"
    return
  }
  _discover_and_add_additional_services() {
    local ts_file="$pwd/templated-services.yaml" tsdc_file="$pwd/docker-compose.templated.yaml" vars id_vars template \
      illegal_vars='^local (ts_file|pwd|tsdc_file|vars|id_vars|id|template)='
    [ ! -e "$ts_file" ] && return 0
    _load_cache
    vars="$(_parse_yaml "$ts_file" "ts_" | grep -E "^ts_" | sed "s/^/local /g")"
    for id in $(echo -e "$vars" | grep -E '^local ts_templates_[a-z0-9_][a-z0-9_]*_template=' | sed 's/^local ts_templates_\([a-z0-9_][a-z0-9_]*\)_template=.*$/\1/g'); do
      id_vars="$(echo -e "$vars" | grep -E "^local ts_templates_${id}_environment_" | sed 's/^local ts_templates_\(\w\w*\)_environment_/local /g' | grep -vE "$illegal_vars")"
      eval "$(echo -e "$vars" | grep -E "^local ts_templates_${id}_template=" | sed 's/^local ts_templates_\(\w\w*\)_template/local template/g')"
      [ ! -e "$pwd/docker-compose.$template.tpl.yaml" ] && echo >&2 "Error: template docker-compose.$template.tpl.yaml not found" && exit 1
      set -a
      eval "$id_vars"
      set +a
      tsdc_file="$cache_dir/docker-compose.tsdc-$(echo -e "$id_vars-$template" | sha1sum | awk '{ print $1 }').yaml"
      envsubst <"$pwd/docker-compose.$template.tpl.yaml" >"$tsdc_file"
      echo -ne " -f $tsdc_file"
    done
    return 0
  }
  _find_dc_and_try() {
    [ -z "${1:-}" ] && exit 0
    _load_dc
    while [ "$pwd" != "/" ]; do
      if _is_dc; then
        cd "$pwd"
        "$self_bin" "$@" || true
        return
      fi
      pwd="$(readlink -f "$pwd"/..)"
    done
    echo >&2 "Error: No docker compose file found" && return 1
  }
  _in_array() {
    [ -n "${1:-}" ] || exit 1
    local a v="$1"
    shift
    for a; do [ "$a" == "$v" ] && return 0; done
    return 1
  }
  _is_dc() {
    for dc_file in docker-compose.y{a,}ml; do [ -e "$pwd/$dc_file" ] && dc_file="$pwd/$dc_file" && return 0; done
    return 1
  }
  _load_cache() {
    [ -n "${cache_dir:-}" ] && return 0
    cache_dir="$HOME/.cache/development-manager-docker-compose"
    [ ! -e "$cache_dir" ] && mkdir -p "$cache_dir"
    find "$cache_dir" -type f -mtime +1 -delete
    declare -A caches
    caches[cache_lc]="limit_comparison"
    caches[cache_su]="self_update"
    caches[cache_kl]="known_locations"
    caches[cache_ae]="active_environments"
    caches[cache_ph]="published_hosts"
    caches[cache_pi]="project_id_$(echo "$pwd" | base64)"
    for key in "${!caches[@]}"; do
      [ -z "${!key:-}" ] && eval "$key=\"$cache_dir/${caches[$key]}\""
      [ ! -e "${!key}" ] && touch "${!key}" && readonly "$key"
    done
    return 0
  }
  _load_dc() {
    [ -n "${dc:-}" ] && return 0
    _load_machine
    dc="docker-compose --log-level ERROR"
    [ "$machine" == "windows" ] && dc="winpty docker-compose --log-level ERROR"
    readonly dc
    return 0
  }
  _load_dependencies() {
    _load_machine
    if [ "$machine" == "macos" ]; then
      which gtouch >/dev/null && touch() { gtouch "$@"; } && return 0
      echo >&2 "Error: Required tools are missing, run: brew install coreutils"
      exit 1
    fi
    return 0
  }
  _load_machine() {
    [ -n "${machine:-}" ] && return 0
    case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    linux*) machine=linux ;;
    darwin*) machine=macos ;;
    mingw*) machine=windows ;;
    *) echo >&2 "Error: Unknown machine type" && exit 1 ;;
    esac
    readonly machine
    return 0
  }
  _load_network() {
    [ -n "${HOST_IP:-}" ] && return 0
    _load_machine
    case "$machine" in
    windows | macos) readonly HOST_IP=host.docker.internal ;;
    linux) readonly HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+') ;;
    esac
    export HOST_IP
    if ! docker network list --format "{{.Name}}" | grep -xcq gateway; then
      docker network create --driver=bridge --attachable --internal=false gateway &>/dev/null
    fi
    return 0
  }
  _load_ssh_sock() {
    if [[ "${SSH_AUTH_SOCK:-}" == "" ]]; then
      readonly SSH_AUTH_SOCK="/tmp/.ssh-sock"
      ssh-agent -a "$SSH_AUTH_SOCK" &>/dev/null
    fi
    export SSH_AUTH_SOCK
    return 0
  }
  _load_user() {
    [ -n "${CHOME:-}" ] && return 0
    _load_machine
    GID="$(id -g)" CUID="$UID" CGID="$GID" CHOME="$HOME"
    [ "$machine" == "windows" ] && CUID="1000" CGID="1000" CHOME="/home/app"
    readonly GID UID CUID CGID CHOME
    export GID UID CUID CGID CHOME
    return 0
  }
  _load_vars() {
    set -a
    # shellcheck source=/dev/null
    for i in .env .env.local .env.$env .env.$env.local; do [ -e "$pwd/$i" ] && source "$pwd/$i"; done
    set +a
    return 0
  }
  _parse_yaml() {
    [ -n "${1:-}" ] && [ -n "${2:-}" ] || return 0
    local prefix="$2"
    local s='[[:space:]]*' w='[a-zA-Z0-9_\-]*' fs
    fs=$(echo @ | tr @ '\034')
    # shellcheck disable=SC1087
    sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
      awk -F"$fs" '{
        indent = length($1)/2;
        vname[indent] = $2;
        for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
          vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
          sub(/-/, "_", vn)
          sub(/-/, "_", $2)
          printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
        }
      }' | tr '`' '"' | sed 's/"\([a-z0-9\-\.][a-z0-9\-\.]*\)"/\\"\1\\"/g' |
      sed '/^[^=]*=\\".*\\"$/{s/=\\"/="/;s/\\"$/"/;}'
  }
  _publish_hosts() {
    _load_cache
    # shellcheck disable=SC2001
    while read -r line; do kill "$(/bin/ps -ao pid,cmd | grep -Po "[0-9]+ (?=$(echo "$line" | sed 's/\./\\\./g'))")" 2>/dev/null || true; done <"$cache_ph"
    touch "$cache_ph"
    local publish_hosts
    if [ "$(wc -l <"$cache_ae")" != "0" ]; then
      # shellcheck disable=SC2046
      publish_hosts="$(docker inspect \
        -f '{{if .Config.Labels.dev_domain}}{{.Config.Labels.dev_domain}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}{{end}}' \
        $(docker ps -aq) | grep . |
        grep -E '^[a-z0-9\-\.]+ [0-9\.]+$' |
        xargs --max-lines=1 --no-run-if-empty echo "avahi-publish -a $line" || echo)"
      [ -n "$publish_hosts" ] && _cache_add "$cache_ph" "$publish_hosts"
      # shellcheck source=/dev/null
      source "$cache_ph"
    fi
    return 0
  }
  _run_on_all() {
    [ -n "${1:-}" ] || exit 1
    _load_cache
    local cmd="$1" args=()
    shift
    if _in_array "-a" "$@"; then
      for v; do if [ "$v" != "-a" ]; then args+=("$v"); fi; done
      set -- "${args[@]}"
      while read -r pwd; do
        echo
        echo -e '\E[32m'"\033[1m$pwd \033[0m"
        cd "$pwd"
        _find_dc_and_try "$cmd" "$@" || true
      done <"$cache_kl"
      exit 0
    fi
    return 0
  }
  _start_traefik() {
    _load_cache
    _load_dc
    if _is_dc && grep -cqE "[^#]*traefik" "$dc_file" $(_discover_and_add_additional_services | sed 's/-f //g'); then
      $dc -f "$traefik_dc" up -d || true
      _cache_add "$cache_kl" "$traefik_path" "$traefik_path"
    fi
    return 0
  }
  _stop_traefik() {
    _load_cache
    _load_dc
    if ! grep . "$cache_ae" | grep -cvxqF "$traefik_path"; then
      $dc -f "$traefik_dc" down || true
    fi
    return 0
  }
  attach() {
    _load_dc
    _is_dc && $dc -f "$dc_file" $(_discover_and_add_additional_services) up "${1:-}" && return
    help attach
    return 1
  }
  check() {
    _is_dc || _find_dc_and_try check || return 1
    _load_vars
    _load_user
    _load_network
    eval "$(_parse_yaml "$dc_file" "dc_" | grep -E "dc_")"
    [ -z "${dc_x_custom_type:-}" ] && return 0
    for dc_latest in "$self_path/templates/$dc_x_custom_type"/docker-compose.y{a,}ml; do [ -e "$dc_latest" ] && break; done
    if [ -n "$dc_x_custom_type" ] && [ -e "$dc_latest" ]; then
      eval "$(_parse_yaml "$dc_latest" "dcl_" | grep -E "dcl_")" &>/dev/null
      if [ -n "$dc_x_custom_version" ] || [ -n "$dcl_x_custom_version" ] && [ "$dcl_x_custom_version" != "$dc_x_custom_version" ]; then
        echo "The current docker template is outdated, run \"$(basename "$self_bin") init $dc_x_custom_type -f\" to update it."
        return 1
      fi
      for i; do [ "$i" == "-v" ] && echo "The current docker template is up-to-date."; done
    fi
    return 0
  }
  dc() {
    _load_dc
    _load_network
    if _is_dc; then
      $dc -f "$dc_file" $(_discover_and_add_additional_services) "$@"
    else
      _find_dc_and_try dc "$@"
    fi
    return
  }
  down() {
    _load_dc
    _load_cache
    _load_network
    _run_on_all down "$@"
    if _is_dc; then
      # shellcheck disable=SC2046
      $dc -f "$dc_file" $(_discover_and_add_additional_services) down "$@"
      _cache_del "$cache_ae" "$pwd"
      _stop_traefik
      _publish_hosts
      return 0
    fi
    _find_dc_and_try down "$@" && return 0
    help down
    return 1
  }
  help() {
    "$help_bin" "$@"
    return 0
  }
  # shellcheck disable=SC2120
  init() {
    local type=""
    for type; do if [ -e "$self_path/templates/$type" ]; then break; else type=""; fi; done
    [ "$type" == "" ] && echo >&2 "Error: No valid type supplied" && "$help_bin" init && exit 1
    if _is_dc && ! _in_array "-f" "$@" && ! _in_array "--force" "$@"; then
      echo >&2 "Warning: Project already initialized. Use --force to re-initialize the project" && exit 1
    fi
    eval 'cp -prf "$self_path"/templates/"$type"/{,.[!.]}* "$pwd"'
    return
  }
  ps() {
    _load_cache
    _run_on_all ps "$@"
    if _is_dc; then
      "$self_bin" dc ps "$@"
    else _find_dc_and_try dc ps "$@"; fi
    return 1
  }
  restart() {
    "$self_bin" down "$@"
    "$self_bin" up "$@"
    return
  }
  self_update() {
    cd "$self_path"
    git pull --quiet origin "$(git branch --show-current)"
    chmod +x "$(basename "$(realpath "$0")")"
    return
  }
  up() {
    _load_network
    _auto_update
    if _is_dc; then
      _start_traefik
      _cache_add "$cache_kl" "$pwd"
      # shellcheck disable=SC2046
      $dc -f "$dc_file" $(_discover_and_add_additional_services) up -d "$@"
      _cache_add "$cache_ae" "$pwd"
      ! grep -q "dev_domain=" "$dc_file" || _publish_hosts
    else _find_dc_and_try up "$@"; fi
    return
  }
  local dc_proxy=(build exec logs pull run)
  readonly dc_proxy
  if _in_array "${1:-}" "${dc_proxy[@]}"; then
    dc "$@"
  elif [ -n "${1:-}" ]; then
    "$@"
  else
    "$help_bin"
  fi
  exit $?
}
_dev "$@"
exit $?
