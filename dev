#!/usr/bin/env bash
# vim: et:sw=2:ts=2:ai

set -euo pipefail

if [[ "$(id -u)" == "0" ]]; then
  echo "This script should not be run as root."
  exit 1
fi
if [ -e /proc/1/cgroup ] && ! head -n1 /proc/1/sched | grep -qce '\(init\|systemd\)'; then
  echo "This script should not be run from a docker container."
  exit 1
fi

run() {
  _auto_update() {
    touch -d '-16 hours' "$cache_lc"
    [ "$cache_lc" -nt "$cache_pi" ] && touch "$cache_pi" && pull
    [ "$cache_lc" -nt "$cache_su" ] && touch "$cache_su" && self_update && check
    return 0
  }
  _find_dc_and_retry() {
    local path="$pwd"
    while [[ $path != / ]]; do
      for dc_file in docker-compose.y{a,}ml; do if [ -e "$path/$dc_file" ]; then
        cd "$path"
        $self_bin "$@"
        exit $?
      fi; done
      path="$(readlink -f "$path"/..)"
    done
  }
  _in_array() {
    local a v="$1"
    shift
    for a; do [ "$a" == "$v" ] && return 0; done
    return 1
  }
  _load_env() {
    case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    linux*) local machine=linux ;;
    darwin*) local machine=macos ;;
    mingw*) local machine=windows ;;
    esac
    readonly machine
    if [[ "$machine" == "macos" ]]; then
      if which gtouch >/dev/null; then touch() { gtouch "$@"; }; fi
      echo "Error: Required tools are missing, run: brew install coreutils"
      return 1
    fi
    local env=dev
    readonly env
    case "$machine" in
    windows | macos) readonly HOST_IP=host.docker.internal ;;
    linux) readonly HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+') ;;
    *) echo "Error: Unknown machine type" && exit 1 ;;
    esac
    export HOST_IP
    if [[ "$SSH_AUTH_SOCK" == "" ]]; then
      readonly SSH_AUTH_SOCK="/tmp/.ssh-sock"
      ssh-agent -a "$SSH_AUTH_SOCK" &>/dev/null
    fi
    export SSH_AUTH_SOCK
    readonly UID GID="$(id -g)"
    export GID UID
    if [[ "$machine" == "windows" ]]; then
      readonly DC="winpty docker-compose --log-level ERROR"
      readonly CUID="1000" CGID="1000" CHOME="/home/app"
    else
      readonly DC="docker-compose --log-level ERROR"
      readonly CUID="$UID" CGID="$GID" CHOME="$HOME"
    fi
    export CUID CGID CHOME
    readonly self_bin="$(realpath "$0")"
    readonly self_path="$(dirname "$self_bin")"
    readonly pwd="$(pwd)"
    readonly traefik_path="$self_path/traefik"
    readonly traefik_dc="$traefik_path/docker-compose.yaml"
    readonly cache_dir="$HOME/.cache/development-manager-docker-compose"
    readonly cache_lc="$cache_dir/limit_comparison"
    readonly cache_su="$cache_dir/self_update"
    readonly cache_kl="$cache_dir/known_locations"
    readonly cache_ae="$cache_dir/active_environments"
    readonly cache_ph="$cache_dir/published_hosts"
    readonly cache_ne="$cache_dir/new_environments"
    PWD="$pwd"
    export PWD
    cache_pi="$cache_dir/project_id_$(echo "$pwd" | base64)"
    source "$self_path/help"
    [ -e "$cache_dir" ] && mkdir -p "$cache_dir"
    for i in $( (
      set -o posix
      set | grep -E '^cache_' | sed 's/=.*//'
    )); do
      [ ! -e "$i" ] && touch "$(eval "echo \$$i")"
    done
    find "$cache_dir" -type f -mtime +1 -delete
    set -a
    # shellcheck source=/dev/null
    for i in .env .env.local .env.$env .env.$env.local; do [ -e "$pwd/$i" ] && source "$pwd/$i"; done
    set +a
    if docker network list --format "{{.Name}}" | grep -xcq gateway; then
      docker network create --driver=bridge --attachable --internal=false gateway &>/dev/null
    fi
    return 0
  }
  _parse_yaml() {
    local prefix="$2"
    local s='[[:space:]]*'
    local w='[a-zA-Z0-9_\-]*'
    local fs
    fs="$(echo @ | tr @ '\034')"
    sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
      awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
        vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
        sub(/-/, "_", vn)
        sub(/-/, "_", $2)
        printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
  }
  _publish_hosts() {
    # shellcheck disable=SC2001
    while read -r line; do kill "$(/bin/ps -ao pid,cmd | grep -Po "[0-9]+ (?=$(echo "$line" | sed 's/\./\\\./g'))")" 2>/dev/null || true; done <"$cache_ph"
    touch "$cache_ph"
    if [ "$(wc -l <"$cache_ae")" != "0" ]; then
      # shellcheck disable=SC2046
      docker inspect \
        -f '{{if .Config.Labels.dev_domain}}{{.Config.Labels.dev_domain}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}{{end}}' \
        $(docker ps -aq) |
        grep -E '^[a-z0-9\-\.]+ [0-9\.]+$' |
        xargs --max-lines=1 --no-run-if-empty echo "avahi-publish -a $line" >>"$cache_ph"
      # shellcheck source=/dev/null
      [ -e "$cache_ph" ] && source "$cache_ph"
    fi
    return
  }
  _start_traefik() {
    if ! grep -qxF "$traefik_path" "$cache_ae"; then
      $DC -f "$traefik_dc" up -d
      echo "$traefik_path" >>"$cache_ae"
    fi
    return
  }
  _stop_traefik() {
    if grep -qxF "$traefik_path" "$cache_ae"; then
      $DC -f "$traefik_dc" down
      grep -xFv "$traefik_path" "$cache_ae" >"$cache_ne" || touch "$cache_ne"
      cp "$cache_ne" "$cache_ae"
    fi
    return
  }
  attach() { $DC up "$1" && return; }
  check() {
    for dc_file in docker-compose.y{a,}ml; do [ -e "$dc_file" ] && break; done
    eval "$(_parse_yaml "$dc_file" "dc_")"
    for dc_latest in "$self_path/templates/$dc_x_custom_type"/docker-compose.y{a,}ml; do [ -e "$dc_latest" ] && break; done
    if [ -n "$dc_x_custom_type" ] && [ -e "$dc_latest" ]; then
      eval "$(_parse_yaml "$dc_latest" "dcl_")" &>/dev/null
      if [ -n "$dc_x_custom_version" ] || [ -n "$dcl_x_custom_version" ] && [ "$dcl_x_custom_version" != "$dc_x_custom_version" ]; then
        echo "The current docker template is outdated, run \"$(basename "$self_bin") init $dc_x_custom_type -f\" to update it."
        return 1
      fi
      for i; do [ "$i" == "-v" ] && echo "The current docker template is up-to-date."; done
    fi
    return 0
  }
  dc() {
    $DC "$@"
    return $?
  }
  # shellcheck disable=SC2120
  down() {
    for arg; do if [ "$arg" == "-a" ]; then
      while read -r i; do for dc_file in docker-compose.y{a,}ml; do
        [ -e "$i/$dc_file" ] && cd "$i" && $self_bin down && break
      done; done <"$cache_kl"
      return
    fi; done
    for dc_file in docker-compose.y{a,}ml; do if [ -e "$dc_file" ]; then
      $DC down "$@"
      grep -xFv "$pwd" "$cache_ae" >"$cache_ne" || true
      cp "$cache_ne" "$cache_ae"
      grep -xFvcq "$traefik_path" "$cache_ae" || _stop_traefik
      break
    fi; done
    _publish_hosts
    return $?
  }
  help() {
    source "$(dirname "$(realpath "$0")")/help"
    return 0
  }
  # shellcheck disable=SC2120
  init() {
    local force=0
    local type=""
    for option in "$@"; do case "$option" in
      -f | --force) force=1 ;;
      *) if [ "$type" == "" ]; then type="$option"; fi ;;
      esac done
    if [ "$type" == "" ]; then
      echo "Error: Type not given"
      help init
      exit 1
    fi
    if [ ! -e "$self_path"/templates/"$type" ]; then
      echo "Error: Type '$type' not found."
      exit 1
    fi
    if [ ! -e "$pwd/docker-compose.yml" ] && [ ! -e "$pwd/docker-compose.yaml" ] || [ "$force" == "1" ]; then
      cp -prf "$self_path"/templates/"$type"/{,.[!.]}* "$pwd"
      return
    elif [ -e "$pwd/docker-compose.yml" ] || [ -e "$pwd/docker-compose.yaml" ]; then
      echo "Warning: Project already initialized. Use --force to re-initialize the project"
      return 1
    fi
    run help init
    return 1
  }
  ps() {
    for arg; do if [ "$arg" == "-a" ]; then
      while read -r i; do for dc_file in docker-compose.y{a,}ml; do
        [ -e "$i/$dc_file" ] && cd "$i" && $self_bin ps && break
      done; done <"$cache_kl"
      return
    fi; done
set -e
    for dc_file in docker-compose.y{a,}ml; do [ -e "$dc_file" ] && $DC ps "$@" && break; done
    return
  }
  restart() {
    $self_bin down "$@"
    $self_bin up "$@"
    return
  }
  self_update() {
    cd "$self_path" >/dev/null
    git pull origin "$(git branch --show-current)" &>/dev/null
    chmod +x "$self_bin"
  }
  # shellcheck disable=SC2120
  up() {
    _auto_update
    for dc_file in docker-compose.y{a,}ml; do [ -e "$dc_file" ] && break; done
    grep -Eq "[^#]*traefik" "$dc_file" && _start_traefik
    grep -qxF "$pwd" "$cache_kl" &>/dev/null || pwd >>"$cache_kl"
    $DC up -d "$@"
    grep -qxF "$pwd" "$cache_ae" &>/dev/null || pwd >>"$cache_ae"
    ! grep -q "dev_domain=" "$dc_file" || _publish_hosts
    return
  }
  local dc_proxy=(build exec logs pull run)
  readonly dc_proxy
  if _in_array "${1:-}" $dc_proxy; then _load_env && "$@" && return || exit $?; fi
  local global_actions=(dc help init self_update)
  readonly global_actions
  if _in_array "${1:-}" $global_actions; then "$@" && return || exit $?; fi
  if [ "$(type -t "${1:-}")" == "function" ]; then
    for dc_file in docker-compose.y{a,}ml; do [ -e "$dc_file" ] && break; done
    [ -e "$dc_file" ] && _load_env && "$@"
    [ ! -e "$dc_file" ] && _load_env && _find_dc_and_retry "$@"
    return
  else
    source "$(dirname "$(realpath "$0")")/help" && help "$@" && return 1
  fi
}
run "$@" && exit $?
